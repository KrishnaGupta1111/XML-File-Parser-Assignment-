You are an expert fullstack engineer specialized in the MERN stack (MongoDB, Express.js, React.js, Node.js).
Create a complete, working fullstack project that fulfills the following assignment exactly.
The goal is to process and display soft credit pull XML reports from Experian.

🎯 Project Title:

CreditSea – Experian Credit Report Dashboard

📘 Objective:

Build a MERN application that allows users to upload an XML file (from Experian), extract key data, save it in MongoDB, and show a structured report in the frontend React dashboard.

⚙️ Backend Requirements (Node.js + Express.js):

Endpoints

POST /api/upload: accepts XML file uploads using multer.

Validate that the uploaded file is .xml.

Parse it using xml2js or fast-xml-parser.

Extract structured data and save it to MongoDB.

GET /api/reports: return all processed reports from the database.

Data to Extract from XML:

Basic Details:

Name

Mobile Phone

PAN

Credit Score

Report Summary:

Total number of accounts

Active accounts

Closed accounts

Current balance amount

Secured accounts amount

Unsecured accounts amount

Last 7 days credit enquiries

Credit Accounts Information:

Bank Name

Credit Card Type

Account Number

Address

Amount Overdue

Current Balance

MongoDB Schema (Mongoose)

const ReportSchema = new mongoose.Schema({
  basicDetails: {
    name: String,
    mobilePhone: String,
    pan: String,
    creditScore: Number
  },
  reportSummary: {
    totalAccounts: Number,
    activeAccounts: Number,
    closedAccounts: Number,
    currentBalance: Number,
    securedAmount: Number,
    unsecuredAmount: Number,
    recentEnquiries: Number
  },
  creditAccounts: [{
    bank: String,
    accountNumber: String,
    address: String,
    overdueAmount: Number,
    currentBalance: Number,
    creditCardType: String
  }],
  createdAt: { type: Date, default: Date.now }
});


Tech/Libraries:

express

mongoose

multer

xml2js or fast-xml-parser

dotenv

cors

nodemon

Folder Structure:

/backend
  ├── controllers/
  ├── routes/
  ├── models/
  ├── middleware/
  ├── server.js


Error Handling:

Graceful error messages for invalid XML or parsing issues.

Centralized error middleware.

💾 Database:

Use MongoDB Atlas (add connection string in .env).

On successful XML upload → parse and store data.

💻 Frontend (React.js):

Pages & Components

UploadPage.jsx: upload XML file and display success/error message.

ReportList.jsx: list all uploaded reports from /api/reports.

ReportDetails.jsx: display full details of a selected report.

UI/UX Requirements

Clean, minimal UI using TailwindCSS or Material UI.

Sections:

Basic Details

Report Summary

Credit Accounts Info

Show data using cards and tables.

Responsive layout for desktop and mobile.

Frontend Libraries

react

react-router-dom

axios

tailwindcss (or Material UI)

Routing

/upload → UploadPage

/reports → ReportList

/reports/:id → ReportDetails

Folder Structure

/frontend
  ├── src/
  │   ├── components/
  │   ├── pages/
  │   ├── services/
  │   ├── App.js
  │   └── index.js

🧪 Testing & Documentation

Add minimal backend tests using jest or supertest for upload and retrieval routes.

Create a README.md file with:

Setup steps (npm install, npm run dev).

MongoDB connection setup.

Example XML usage and API response.

Folder structure.

🧱 Tech Stack Summary

Backend: Node.js, Express.js, Multer, Mongoose, xml2js

Frontend: React.js, Axios, React Router, TailwindCSS

Database: MongoDB Atlas

Testing: Jest / Supertest

✅ Expected Output

Generate a complete, ready-to-run MERN project that includes:

/backend folder (Express + MongoDB)

/frontend folder (React UI)

Working endpoints /api/upload and /api/reports

Functional MongoDB schema and parsing logic

React pages for upload and report viewing

The project should run with:

npm install
npm run dev


(using concurrently to run both backend and frontend)

Build the entire application now so it’s production-ready, clean, modular, and meets all requirements exactly as in the CreditSea Fullstack Engineer Assignment.